name: 'lvh-run'
description: 'Runs LVH VMs for Cilium CI testing'
inputs:
  test-name:
    description: 'Unique test name'
    required: true
  image:
    description: 'LVH image name ("base", "kind", etc)'
    required: true
    default: 'kind'
  image-version:
    description: 'LVH image version'
    required: true
    default: '5.10-main'
  lvh-version:
    description: 'LVH cli version (Docker tag)'
    required: true
    default: 'v0.0.3'
  cmd:
    description: 'Commands to run in a VM'
    required: true
  ssh-port:
    description: 'SSH port for VM on a host'
    required: true
    default: 2222
  host-mount:
    description: 'Host dir path to mount in /host dir of a VM'
    required: true
  provision:
    description: 'Provision VM (if set to false, only given test cmd is going to be run)'
    required: true
    default: 'true'
  dns-resolver:
    description: 'Set DNS resolver in /etc/resolv.conf of a VM'
    required: false
  install-dependencies:
    description: 'Install QEMU dependencies (Debian/Ubuntu)'
    default: 'false'
  serial-port:
    description: 'Serial port to access VM'
    required: true
    default: 0
  cpu:
    description: 'CPU count'
    required: true
    default: 8
  mem:
    description: 'RAM size'
    required: true
    default: '6G'
  cpu-kind:
    description: 'CPU kind to use'
    required: true
    default: 'host'
  kernel:
    description: 'Path to kernel image to boot with'
    required: false
runs:
  using: "composite"
  steps:
    - name: Find LVH cli
      if: ${{ inputs.provision == 'true' }}
      id: find-lvh-cli
      shell: bash
      run: |
        if [ -f "/bin/lvh" ]; then
          echo 'skip=true' >> $GITHUB_OUTPUT
        fi

    - name: Install LVH cli
      if: ${{ inputs.provision == 'true' && steps.find-lvh-cli.outputs.skip != 'true' }}
      shell: bash
      run: |
        cid=$(docker create quay.io/lvh-images/lvh:${{ inputs.lvh-version }})
        docker cp $cid:/usr/bin/lvh /tmp/lvh
        docker rm $cid
        chmod +x /tmp/lvh
        sudo mv /tmp/lvh /bin/lvh

    - name: Install dependencies
      if: ${{ inputs.provision == 'true' && inputs.install-dependencies == 'true' }}
      shell: bash
      run: |
        sudo apt update
        sudo apt install -y cpu-checker qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils virtinst virt-manager
        sudo kvm-ok

    - uses: actions/cache@69d9d449aced6a2ede0bc19182fadc3a0a42d2b0
      if: ${{ inputs.provision == 'true' }}
      id: cache-lvh-image
      with:
        path: /_images/${{ inputs.image }}_${{ inputs.image-version }}.qcow2.zst
        key: lvh-image-${{ inputs.image }}_${{ inputs.image-version }}

    - name: Derive VM image file name
      if: ${{ inputs.provision == 'true' }}
      id: derive-image-name
      shell: bash
      run: echo "image-name=${{ inputs.image }}_$(echo ${{ inputs.image-version }} | sed 's/\(.*\)\-\(.*\)/\1/g')" >> $GITHUB_OUTPUT

    - name: Fetch VM image
      if: ${{ inputs.provision == 'true' && steps.cache-lvh-image.outputs.cache-hit != 'true' }}
      shell: bash
      run: |
        sudo mkdir /_images; sudo chmod 777 /_images
        docker run -v /_images:/mnt/images quay.io/lvh-images/${{ inputs.image }}:${{ inputs.image-version }} cp /data/images/${{ steps.derive-image-name.outputs.image-name }}.qcow2.zst /mnt/images

    - name: Prepare VM image
      if: ${{ inputs.provision == 'true'  }}
      shell: bash
      run: |
        cd /_images
        zstd -d ${{ steps.derive-image-name.outputs.image-name }}.qcow2.zst -o ${{ inputs.test-name }}.qcow2

    - name: Start VM
      if: ${{ inputs.provision == 'true' }}
      shell: bash
      run: |
        extraArgs=()
        if [ -z "${{ inputs.kernel }}" ]; then
          extraArgs+=("--kernel" "${{ inputs.kernel }}")
        fi
        sudo /bin/lvh run --host-mount=${{ inputs.host-mount }} --image /_images/${{ inputs.test-name }}.qcow2 \
            --daemonize -p ${{ inputs.ssh-port }}:22 --serial-port ${{ inputs.serial-port }} \
            --cpu=${{ inputs.cpu }} --mem=${{ inputs.mem }} --cpu-kind ${{ inputs.cpu-kind }} \
            ${extraArgs}[@]

    - name: Set DNS resolver
      if: ${{ inputs.provision == 'true' && inputs.dns-resolver != '' }}
      shell: bash
      run: |
         ssh -p ${{ inputs.ssh-port }} -o "StrictHostKeyChecking=no" root@localhost << EOF
         set -e
         echo "nameserver ${{ inputs.dns-resolver }}" > /etc/resolv.conf
         EOF

    - name: Run test cmd in VM
      shell: bash
      run: |
         ssh -p ${{ inputs.ssh-port }} -o "StrictHostKeyChecking=no" root@localhost << EOF
         set -eu

         ${{ inputs.cmd }}
         EOF
